// Generated by gencpp from file cloud_robot/SortingIntsRequest.msg
// DO NOT EDIT!


#ifndef CLOUD_ROBOT_MESSAGE_SORTINGINTSREQUEST_H
#define CLOUD_ROBOT_MESSAGE_SORTINGINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cloud_robot
{
template <class ContainerAllocator>
struct SortingIntsRequest_
{
  typedef SortingIntsRequest_<ContainerAllocator> Type;

  SortingIntsRequest_()
    : nums()  {
    }
  SortingIntsRequest_(const ContainerAllocator& _alloc)
    : nums(_alloc)  {
    }



   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _nums_type;
  _nums_type nums;




  typedef boost::shared_ptr< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SortingIntsRequest_

typedef ::cloud_robot::SortingIntsRequest_<std::allocator<void> > SortingIntsRequest;

typedef boost::shared_ptr< ::cloud_robot::SortingIntsRequest > SortingIntsRequestPtr;
typedef boost::shared_ptr< ::cloud_robot::SortingIntsRequest const> SortingIntsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cloud_robot::SortingIntsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cloud_robot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'cloud_robot': ['/home/abner0908/catkin_ws/src/cloud_robot/msg', '/home/abner0908/catkin_ws/devel/share/cloud_robot/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b521854de373a8ca6f8b6aacd694ea7";
  }

  static const char* value(const ::cloud_robot::SortingIntsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b521854de373a8cULL;
  static const uint64_t static_value2 = 0xa6f8b6aacd694ea7ULL;
};

template<class ContainerAllocator>
struct DataType< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cloud_robot/SortingIntsRequest";
  }

  static const char* value(const ::cloud_robot::SortingIntsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64[] nums\n\
";
  }

  static const char* value(const ::cloud_robot::SortingIntsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nums);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct SortingIntsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cloud_robot::SortingIntsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cloud_robot::SortingIntsRequest_<ContainerAllocator>& v)
  {
    s << indent << "nums[]" << std::endl;
    for (size_t i = 0; i < v.nums.size(); ++i)
    {
      s << indent << "  nums[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.nums[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLOUD_ROBOT_MESSAGE_SORTINGINTSREQUEST_H
